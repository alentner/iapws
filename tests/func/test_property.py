import unittest
from iapws.if97 import region1, region2, region3, region4
import numpy

class test_ThermodynamicProperty(unittest.TestCase):

    def test_ThermodynamicProperty_Region1(self):
        self.assertEqual(round(region1.v(3, 300), 11), 0.100215168e-2,  'Failed specific volume,          state 1, region 1!')
        self.assertEqual(round(region1.u(3, 300), 6),  0.112324818e3,   'Failed specific internal energy, state 1, region 1!')
        self.assertEqual(round(region1.s(3, 300), 9),  0.392294792,     'Failed specific entropy,         state 1, region 1!')
        self.assertEqual(round(region1.h(3, 300), 6),  0.115331273e3,   'Failed specific enthalpy,        state 1, region 1!')
        self.assertEqual(round(region1.cp(3, 300), 8), 0.417301218e1,   'Failed specific heat capacity,   state 1, region 1!')
        self.assertEqual(round(region1.cv(3, 300), 8), 0.412120160e1,   'Failed specific heat capacity,   state 1, region 1!')
        self.assertEqual(round(region1.w(3, 300), 5),  0.150773921e4,   'Failed speed of sound,           state 1, region 1!')

        self.assertEqual(round(region1.v(80, 300), 12), 0.971180894e-3, 'Failed specific volume,          state 2, region 1!')
        self.assertEqual(round(region1.u(80, 300), 6),  0.106448356e3,  'Failed specific internal energy, state 2, region 1!')
        self.assertEqual(round(region1.s(80, 300), 9),  0.368563852,    'Failed specific entropy,         state 2, region 1!')
        self.assertEqual(round(region1.h(80, 300), 6),  0.184142828e3,  'Failed specific enthalpy,        state 2, region 1!')
        self.assertEqual(round(region1.cp(80, 300), 8), 0.401008987e1,  'Failed specific heat capacity,   state 2, region 1!')
        self.assertEqual(round(region1.cv(80, 300), 8), 0.391736606e1,  'Failed specific heat capacity,   state 2, region 1!')
        self.assertEqual(round(region1.w(80, 300), 5),  0.163469054e4,  'Failed speed of sound,           state 2, region 1!')

        self.assertEqual(round(region1.v(3, 500), 11), 0.120241800e-2,  'Failed specific volume,          state 3, region 1!')
        self.assertEqual(round(region1.u(3, 500), 6),  0.971934985e3,   'Failed specific internal energy, state 3, region 1!')
        self.assertEqual(round(region1.s(3, 500), 8),  0.258041912e1,   'Failed specific entropy,         state 3, region 1!')
        self.assertEqual(round(region1.h(3, 500), 6),  0.975542239e3,   'Failed specific enthalpy,        state 3, region 1!')
        self.assertEqual(round(region1.cp(3, 500), 8), 0.465580682e1,   'Failed specific heat capacity,   state 3, region 1!')
        self.assertEqual(round(region1.cv(3, 500), 8), 0.322139223e1,   'Failed specific heat capacity,   state 3, region 1!')
        self.assertEqual(round(region1.w(3, 500), 5),  0.124071337e4,   'Failed speed of sound,           state 3, region 1!')

    def test_ThermodynamicProperty_Region2(self):
        self.assertEqual(round(region2.v(0.0035, 300), 7),  0.394913866e2, 'Failed specific volume,          state 1, region 2!')
        self.assertEqual(round(region2.u(0.0035, 300), 5),  0.241169160e4, 'Failed specific internal energy, state 1, region 2!')
        self.assertEqual(round(region2.s(0.0035, 300), 8),  0.852238967e1, 'Failed specific entropy,         state 1, region 2!')
        self.assertEqual(round(region2.h(0.0035, 300), 5),  0.254991145e4, 'Failed specific enthalpy,        state 1, region 2!')
        self.assertEqual(round(region2.cp(0.0035, 300), 8), 0.191300162e1, 'Failed specific heat capacity,   state 1, region 2!')
        self.assertEqual(round(region2.w(0.0035, 300), 6),  0.427920172e3, 'Failed speed of sound,           state 1, region 2!')
        
        self.assertEqual(round(region2.v(0.0035, 700), 7),  0.923015898e2, 'Failed specific volume,          state 2, region 2!')
        self.assertEqual(round(region2.u(0.0035, 700), 5),  0.301262819e4, 'Failed specific internal energy, state 2, region 2!')
        self.assertEqual(round(region2.s(0.0035, 700), 7),  0.101749996e2, 'Failed specific entropy,         state 2, region 2!')
        self.assertEqual(round(region2.h(0.0035, 700), 5),  0.333568375e4, 'Failed specific enthalpy,        state 2, region 2!')
        self.assertEqual(round(region2.cp(0.0035, 700), 8), 0.208141274e1, 'Failed specific heat capacity,   state 2, region 2!')
        self.assertEqual(round(region2.w(0.0035, 700), 6),  0.644289068e3, 'Failed speed of sound,           state 2, region 2!')

        self.assertEqual(round(region2.v(30, 700), 11), 0.542946619e-2,    'Failed specific volume,          state 3, region 2!')
        self.assertEqual(round(region2.u(30, 700), 5),  0.246861076e4,     'Failed specific internal energy, state 3, region 2!')
        self.assertEqual(round(region2.s(30, 700), 8),  0.517540298e1,     'Failed specific entropy,         state 3, region 2!')
        self.assertEqual(round(region2.h(30, 700), 5),  0.263149474e4,     'Failed specific enthalpy,        state 3, region 2!')
        self.assertEqual(round(region2.cp(30, 700), 7), 0.103505092e2,     'Failed specific heat capacity,   state 3, region 2!')
        self.assertEqual(round(region2.w(30, 700), 6),  0.480386523e3,     'Failed speed of sound,           state 3, region 2!')

    def test_ThermodynamicProperty_Region3_bnd23(self):
        self.assertEqual(round(region3.bnd23T(0.165291643e2), 6), 0.623150000e3, 'Failed boundary equation, region 23 by T!')
        self.assertEqual(round(region3.bnd23P(0.623150000e3), 7), 0.165291643e2, 'Failed boundary equation, region 23 by P!') 

    def test_ThermodynamicProperty_Region3(self):
        self.assertEqual(round(region3.P(1 / 500, 650), 7),  0.255837018e2, 'Failed pressure,                 state 1, region 3!')
        self.assertEqual(round(region3.u(1 / 500, 650), 5),  0.181226279e4, 'Failed specific internal energy, state 1, region 3!')
        self.assertEqual(round(region3.s(1 / 500, 650), 8),  0.405427273e1, 'Failed specific entropy,         state 1, region 3!')
        self.assertEqual(round(region3.h(1 / 500, 650), 5),  0.186343019e4, 'Failed specific enthalpy,        state 1, region 3!')
        self.assertEqual(round(region3.cp(1 / 500, 650), 7), 0.138935717e2, 'Failed specific heat capacity,   state 1, region 3!')
        self.assertEqual(round(region3.w(1 / 500, 650), 6),  0.502005554e3, 'Failed speed of sound,           state 1, region 3!')

        self.assertEqual(round(region3.P(1 / 200, 650), 7),  0.222930643e2, 'Failed pressure,                 state 2, region 3!')
        self.assertEqual(round(region3.u(1 / 200, 650), 5),  0.226365868e4, 'Failed specific internal energy, state 2, region 3!')
        self.assertEqual(round(region3.s(1 / 200, 650), 8),  0.485438792e1, 'Failed specific entropy,         state 2, region 3!')
        self.assertEqual(round(region3.h(1 / 200, 650), 5),  0.237512401e4, 'Failed specific enthalpy,        state 2, region 3!')
        self.assertEqual(round(region3.cp(1 / 200, 650), 7), 0.446579342e2, 'Failed specific heat capacity,   state 2, region 3!')
        self.assertEqual(round(region3.w(1 / 200, 650), 6),  0.383444594e3, 'Failed speed of sound,           state 2, region 3!')

        self.assertEqual(round(region3.P(1 / 500, 750), 7), 0.783095639e2,  'Failed pressure,                 state 3, region 3!')
        self.assertEqual(round(region3.u(1 / 500, 750), 5),  0.210206932e4, 'Failed specific internal energy, state 3, region 3!')
        self.assertEqual(round(region3.s(1 / 500, 750), 8),  0.446971906e1, 'Failed specific entropy,         state 3, region 3!')
        self.assertEqual(round(region3.h(1 / 500, 750), 5),  0.225868845e4, 'Failed specific enthalpy,        state 3, region 3!')
        self.assertEqual(round(region3.cp(1 / 500, 750), 8), 0.634165359e1, 'Failed specific heat capacity,   state 3, region 3!')
        self.assertEqual(round(region3.w(1 / 500, 750), 6),  0.760696041e3, 'Failed speed of sound,           state 3, region 3!')

    def test_ThermodynamicProperty_Region4_satP(self):
        self.assertEqual(round(region4.satP(300), 11), 0.353658941e-2, 'Failed satuation pressure, 300K!') 
        self.assertEqual(round(region4.satP(500), 8),  0.263889776e1,  'Failed satuation pressure, 500K!') 
        self.assertEqual(round(region4.satP(600), 7),  0.123443146e2,  'Failed satuation pressure, 600K!') 

    def test_ThermodynamicProperty_Region4_satT(self):
        self.assertEqual(round(region4.satT(0.10), 6), 0.372755919e3,  'Failed satuation pressure, 0.1 MPa!') 
        self.assertEqual(round(region4.satT(1.00), 6), 0.453035632e3,  'Failed satuation pressure, 1.0 MPa!') 
        self.assertEqual(round(region4.satT(10.0), 6), 0.584149488e3,  'Failed satuation pressure, 10  MPa!') 

class test_ThermodynamicPropertyBackwards(unittest.TestCase):

    def test_ThermodynamicProperty_Region1_Ph(self):
        self.assertEqual(round(region1.T_h(3, 500), 6),   0.391798509e3, 'Failed backward temperature, state 1, region 1!') 
        self.assertEqual(round(region1.T_h(80, 500), 6),  0.378108626e3, 'Failed backward temperature, state 2, region 1!')
        self.assertEqual(round(region1.T_h(80, 1500), 6), 0.611041229e3, 'Failed backward temperature, state 3, region 1!')

        self.assertAlmostEqual(region1.v(3, 300)  / region1.v_h(3,  region1.h(3, 300)), 1.000, places=2, msg='Failed v consistancy,  state 1, region 1!')
        self.assertAlmostEqual(region1.u(3, 300)  / region1.u_h(3,  region1.h(3, 300)), 1.000, places=2, msg='Failed u consistancy,  state 1, region 1!')
        self.assertAlmostEqual(region1.s(3, 300)  / region1.s_h(3,  region1.h(3, 300)), 1.000, places=2, msg='Failed s consistancy,  state 1, region 1!')
        self.assertAlmostEqual(region1.g(3, 300)  / region1.g_h(3,  region1.h(3, 300)), 1.000, places=2, msg='Failed g consistancy,  state 1, region 1!')
        self.assertAlmostEqual(region1.cp(3, 300) / region1.cp_h(3, region1.h(3, 300)), 1.000, places=2, msg='Failed cp consistancy, state 1, region 1!')
        self.assertAlmostEqual(region1.cv(3, 300) / region1.cv_h(3, region1.h(3, 300)), 1.000, places=2, msg='Failed cv consistancy, state 1, region 1!')
        self.assertAlmostEqual(region1.w(3, 300)  / region1.w_h(3,  region1.h(3, 300)), 1.000, places=2, msg='Failed w consistancy,  state 1, region 1!')
        self.assertAlmostEqual(region1.a(3, 300)  / region1.a_h(3,  region1.h(3, 300)), 1.000, places=2, msg='Failed a consistancy,  state 1, region 1!')
        self.assertAlmostEqual(region1.k(3, 300)  / region1.k_h(3,  region1.h(3, 300)), 1.000, places=2, msg='Failed k consistancy,  state 1, region 1!')

        self.assertAlmostEqual(region1.v(80, 300)  / region1.v_h(80,  region1.h(80, 300)), 1.000, places=2, msg='Failed v consistancy,  state 2, region 1!')
        self.assertAlmostEqual(region1.u(80, 300)  / region1.u_h(80,  region1.h(80, 300)), 1.000, places=2, msg='Failed u consistancy,  state 2, region 1!')
        self.assertAlmostEqual(region1.s(80, 300)  / region1.s_h(80,  region1.h(80, 300)), 1.000, places=2, msg='Failed s consistancy,  state 2, region 1!')
        self.assertAlmostEqual(region1.g(80, 300)  / region1.g_h(80,  region1.h(80, 300)), 1.000, places=2, msg='Failed g consistancy,  state 2, region 1!')
        self.assertAlmostEqual(region1.cp(80, 300) / region1.cp_h(80, region1.h(80, 300)), 1.000, places=2, msg='Failed cp consistancy, state 2, region 1!')
        self.assertAlmostEqual(region1.cv(80, 300) / region1.cv_h(80, region1.h(80, 300)), 1.000, places=2, msg='Failed cv consistancy, state 2, region 1!')
        self.assertAlmostEqual(region1.w(80, 300)  / region1.w_h(80,  region1.h(80, 300)), 1.000, places=2, msg='Failed w consistancy,  state 2, region 1!')
        self.assertAlmostEqual(region1.a(80, 300)  / region1.a_h(80,  region1.h(80, 300)), 1.000, places=2, msg='Failed a consistancy,  state 2, region 1!')
        self.assertAlmostEqual(region1.k(80, 300)  / region1.k_h(80,  region1.h(80, 300)), 1.000, places=2, msg='Failed k consistancy,  state 2, region 1!')
        
        self.assertAlmostEqual(region1.v(3, 500)  / region1.v_h(3,  region1.h(3, 500)), 1.000, places=2, msg='Failed v consistancy,  state 3, region 1!')
        self.assertAlmostEqual(region1.u(3, 500)  / region1.u_h(3,  region1.h(3, 500)), 1.000, places=2, msg='Failed u consistancy,  state 3, region 1!')
        self.assertAlmostEqual(region1.s(3, 500)  / region1.s_h(3,  region1.h(3, 500)), 1.000, places=2, msg='Failed s consistancy,  state 3, region 1!')
        self.assertAlmostEqual(region1.g(3, 500)  / region1.g_h(3,  region1.h(3, 500)), 1.000, places=2, msg='Failed g consistancy,  state 3, region 1!')
        self.assertAlmostEqual(region1.cp(3, 500) / region1.cp_h(3, region1.h(3, 500)), 1.000, places=2, msg='Failed cp consistancy, state 3, region 1!')
        self.assertAlmostEqual(region1.cv(3, 500) / region1.cv_h(3, region1.h(3, 500)), 1.000, places=2, msg='Failed cv consistancy, state 3, region 1!')
        self.assertAlmostEqual(region1.w(3, 500)  / region1.w_h(3,  region1.h(3, 500)), 1.000, places=2, msg='Failed w consistancy,  state 3, region 1!')
        self.assertAlmostEqual(region1.a(3, 500)  / region1.a_h(3,  region1.h(3, 500)), 1.000, places=2, msg='Failed a consistancy,  state 3, region 1!')
        self.assertAlmostEqual(region1.k(3, 500)  / region1.k_h(3,  region1.h(3, 500)), 1.000, places=2, msg='Failed k consistancy,  state 3, region 1!')

    def test_ThermodynamicProperty_Region1_Ps(self):
        self.assertEqual(round(region1.T_s(3,  0.5), 6), 0.307842258e3, 'Failed backward temperature, state 1, region 1!') 
        self.assertEqual(round(region1.T_s(80, 0.5), 6), 0.309979785e3, 'Failed backward temperature, state 2, region 1!')
        self.assertEqual(round(region1.T_s(80, 3.0), 6), 0.565899909e3, 'Failed backward temperature, state 3, region 1!')

        self.assertAlmostEqual(region1.v(3, 300)  / region1.v_s(3,  region1.s(3, 300)), 1.000, places=2, msg='Failed v consistancy,  state 1, region 1!')
        self.assertAlmostEqual(region1.u(3, 300)  / region1.u_s(3,  region1.s(3, 300)), 1.000, places=2, msg='Failed u consistancy,  state 1, region 1!')
        self.assertAlmostEqual(region1.h(3, 300)  / region1.h_s(3,  region1.s(3, 300)), 1.000, places=2, msg='Failed s consistancy,  state 1, region 1!')
        self.assertAlmostEqual(region1.g(3, 300)  / region1.g_s(3,  region1.s(3, 300)), 1.000, places=2, msg='Failed g consistancy,  state 1, region 1!')
        self.assertAlmostEqual(region1.cp(3, 300) / region1.cp_s(3, region1.s(3, 300)), 1.000, places=2, msg='Failed cp consistancy, state 1, region 1!')
        self.assertAlmostEqual(region1.cv(3, 300) / region1.cv_s(3, region1.s(3, 300)), 1.000, places=2, msg='Failed cv consistancy, state 1, region 1!')
        self.assertAlmostEqual(region1.w(3, 300)  / region1.w_s(3,  region1.s(3, 300)), 1.000, places=2, msg='Failed w consistancy,  state 1, region 1!')
        self.assertAlmostEqual(region1.a(3, 300)  / region1.a_s(3,  region1.s(3, 300)), 1.000, places=2, msg='Failed a consistancy,  state 1, region 1!')
        self.assertAlmostEqual(region1.k(3, 300)  / region1.k_s(3,  region1.s(3, 300)), 1.000, places=2, msg='Failed k consistancy,  state 1, region 1!')

        self.assertAlmostEqual(region1.v(80, 300)  / region1.v_s(80,  region1.s(80, 300)), 1.000, places=2, msg='Failed v consistancy,  state 2, region 1!')
        self.assertAlmostEqual(region1.u(80, 300)  / region1.u_s(80,  region1.s(80, 300)), 1.000, places=2, msg='Failed u consistancy,  state 2, region 1!')
        self.assertAlmostEqual(region1.h(80, 300)  / region1.h_s(80,  region1.s(80, 300)), 1.000, places=2, msg='Failed s consistancy,  state 2, region 1!')
        self.assertAlmostEqual(region1.g(80, 300)  / region1.g_s(80,  region1.s(80, 300)), 1.000, places=2, msg='Failed g consistancy,  state 2, region 1!')
        self.assertAlmostEqual(region1.cp(80, 300) / region1.cp_s(80, region1.s(80, 300)), 1.000, places=2, msg='Failed cp consistancy, state 2, region 1!')
        self.assertAlmostEqual(region1.cv(80, 300) / region1.cv_s(80, region1.s(80, 300)), 1.000, places=2, msg='Failed cv consistancy, state 2, region 1!')
        self.assertAlmostEqual(region1.w(80, 300)  / region1.w_s(80,  region1.s(80, 300)), 1.000, places=2, msg='Failed w consistancy,  state 2, region 1!')
        self.assertAlmostEqual(region1.a(80, 300)  / region1.a_s(80,  region1.s(80, 300)), 1.000, places=2, msg='Failed a consistancy,  state 2, region 1!')
        self.assertAlmostEqual(region1.k(80, 300)  / region1.k_s(80,  region1.s(80, 300)), 1.000, places=2, msg='Failed k consistancy,  state 2, region 1!')
        
        self.assertAlmostEqual(region1.v(3, 500)  / region1.v_s(3,  region1.s(3, 500)), 1.000, places=2, msg='Failed v consistancy,  state 3, region 1!')
        self.assertAlmostEqual(region1.u(3, 500)  / region1.u_s(3,  region1.s(3, 500)), 1.000, places=2, msg='Failed u consistancy,  state 3, region 1!')
        self.assertAlmostEqual(region1.h(3, 500)  / region1.h_s(3,  region1.s(3, 500)), 1.000, places=2, msg='Failed s consistancy,  state 3, region 1!')
        self.assertAlmostEqual(region1.g(3, 500)  / region1.g_s(3,  region1.s(3, 500)), 1.000, places=2, msg='Failed g consistancy,  state 3, region 1!')
        self.assertAlmostEqual(region1.cp(3, 500) / region1.cp_s(3, region1.s(3, 500)), 1.000, places=2, msg='Failed cp consistancy, state 3, region 1!')
        self.assertAlmostEqual(region1.cv(3, 500) / region1.cv_s(3, region1.s(3, 500)), 1.000, places=2, msg='Failed cv consistancy, state 3, region 1!')
        self.assertAlmostEqual(region1.w(3, 500)  / region1.w_s(3,  region1.s(3, 500)), 1.000, places=2, msg='Failed w consistancy,  state 3, region 1!')
        self.assertAlmostEqual(region1.a(3, 500)  / region1.a_s(3,  region1.s(3, 500)), 1.000, places=2, msg='Failed a consistancy,  state 3, region 1!')
        self.assertAlmostEqual(region1.k(3, 500)  / region1.k_s(3,  region1.s(3, 500)), 1.000, places=2, msg='Failed k consistancy,  state 3, region 1!')

    def test_ThermodynamicProperty_Region2_Ph(self):
        self.assertEqual(round(region2.bnd2b2c(0.100e3), 6), 0.3516004323e4, 'Failed boundary equation, region 2b-2c!')  
        self.assertEqual(round(region2.T_h(0.001, 3000), 6), 0.534433241e3,  'Failed backward temperature, state 1, region 2a!')
        self.assertEqual(round(region2.T_h(3, 3000), 6),     0.575373370e3,  'Failed backward temperature, state 2, region 2a!') 
        self.assertEqual(round(region2.T_h(3, 4000), 5),     0.101077577e4,  'Failed backward temperature, state 3, region 2a!')         
        self.assertEqual(round(region2.T_h(5, 3500), 6),     0.801299102e3,  'Failed backward temperature, state 1, region 2b!')
        self.assertEqual(round(region2.T_h(5, 4000), 5),     0.101531583e4,  'Failed backward temperature, state 2, region 2b!') 
        self.assertEqual(round(region2.T_h(25, 3500), 6),    0.875279054e3,  'Failed backward temperature, state 3, region 2b!')
        self.assertEqual(round(region2.T_h(40, 2700), 6),    0.743056411e3,  'Failed backward temperature, state 1, region 2c!')
        self.assertEqual(round(region2.T_h(60, 2700), 6),    0.791137067e3,  'Failed backward temperature, state 2, region 2c!') 
        self.assertEqual(round(region2.T_h(60, 3200), 6),    0.882756860e3,  'Failed backward temperature, state 3, region 2c!')

        self.assertAlmostEqual(region2.v(0.0035, 300)  / region2.v_h(0.0035,  region2.h(0.0035, 300)), 1.000, places=2, msg='Failed v consistancy,  state 1, region 2!')
        self.assertAlmostEqual(region2.u(0.0035, 300)  / region2.u_h(0.0035,  region2.h(0.0035, 300)), 1.000, places=2, msg='Failed u consistancy,  state 1, region 2!')
        self.assertAlmostEqual(region2.s(0.0035, 300)  / region2.s_h(0.0035,  region2.h(0.0035, 300)), 1.000, places=2, msg='Failed s consistancy,  state 1, region 2!')
        self.assertAlmostEqual(region2.g(0.0035, 300)  / region2.g_h(0.0035,  region2.h(0.0035, 300)), 1.000, places=1, msg='Failed g consistancy,  state 1, region 2!')
        self.assertAlmostEqual(region2.cp(0.0035, 300) / region2.cp_h(0.0035, region2.h(0.0035, 300)), 1.000, places=2, msg='Failed cp consistancy, state 1, region 2!')
        self.assertAlmostEqual(region2.cv(0.0035, 300) / region2.cv_h(0.0035, region2.h(0.0035, 300)), 1.000, places=2, msg='Failed cv consistancy, state 1, region 2!')
        self.assertAlmostEqual(region2.w(0.0035, 300)  / region2.w_h(0.0035,  region2.h(0.0035, 300)), 1.000, places=2, msg='Failed w consistancy,  state 1, region 2!')
        self.assertAlmostEqual(region2.a(0.0035, 300)  / region2.a_h(0.0035,  region2.h(0.0035, 300)), 1.000, places=2, msg='Failed a consistancy,  state 1, region 2!')
        self.assertAlmostEqual(region2.k(0.0035, 300)  / region2.k_h(0.0035,  region2.h(0.0035, 300)), 1.000, places=2, msg='Failed k consistancy,  state 1, region 2!')

        self.assertAlmostEqual(region2.v(0.0035, 700)  / region2.v_h(0.0035,  region2.h(0.0035, 700)), 1.000, places=2, msg='Failed v consistancy,  state 2, region 2!')
        self.assertAlmostEqual(region2.u(0.0035, 700)  / region2.u_h(0.0035,  region2.h(0.0035, 700)), 1.000, places=2, msg='Failed u consistancy,  state 2, region 2!')
        self.assertAlmostEqual(region2.s(0.0035, 700)  / region2.s_h(0.0035,  region2.h(0.0035, 700)), 1.000, places=2, msg='Failed s consistancy,  state 2, region 2!')
        self.assertAlmostEqual(region2.g(0.0035, 700)  / region2.g_h(0.0035,  region2.h(0.0035, 700)), 1.000, places=2, msg='Failed g consistancy,  state 2, region 2!')
        self.assertAlmostEqual(region2.cp(0.0035, 700) / region2.cp_h(0.0035, region2.h(0.0035, 700)), 1.000, places=2, msg='Failed cp consistancy, state 2, region 2!')
        self.assertAlmostEqual(region2.cv(0.0035, 700) / region2.cv_h(0.0035, region2.h(0.0035, 700)), 1.000, places=2, msg='Failed cv consistancy, state 2, region 2!')
        self.assertAlmostEqual(region2.w(0.0035, 700)  / region2.w_h(0.0035,  region2.h(0.0035, 700)), 1.000, places=2, msg='Failed w consistancy,  state 2, region 2!')
        self.assertAlmostEqual(region2.a(0.0035, 700)  / region2.a_h(0.0035,  region2.h(0.0035, 700)), 1.000, places=2, msg='Failed a consistancy,  state 2, region 2!')
        self.assertAlmostEqual(region2.k(0.0035, 700)  / region2.k_h(0.0035,  region2.h(0.0035, 700)), 1.000, places=2, msg='Failed k consistancy,  state 2, region 2!')
        
        self.assertAlmostEqual(region2.v(30, 700)  / region2.v_h(30,  region2.h(30, 700)), 1.000, places=2, msg='Failed v consistancy,  state 3, region 2!')
        self.assertAlmostEqual(region2.u(30, 700)  / region2.u_h(30,  region2.h(30, 700)), 1.000, places=2, msg='Failed u consistancy,  state 3, region 2!')
        self.assertAlmostEqual(region2.s(30, 700)  / region2.s_h(30,  region2.h(30, 700)), 1.000, places=2, msg='Failed s consistancy,  state 3, region 2!')
        self.assertAlmostEqual(region2.g(30, 700)  / region2.g_h(30,  region2.h(30, 700)), 1.000, places=2, msg='Failed g consistancy,  state 3, region 2!')
        self.assertAlmostEqual(region2.cp(30, 700) / region2.cp_h(30, region2.h(30, 700)), 1.000, places=2, msg='Failed cp consistancy, state 3, region 2!')
        self.assertAlmostEqual(region2.cv(30, 700) / region2.cv_h(30, region2.h(30, 700)), 1.000, places=2, msg='Failed cv consistancy, state 3, region 2!')
        self.assertAlmostEqual(region2.w(30, 700)  / region2.w_h(30,  region2.h(30, 700)), 1.000, places=2, msg='Failed w consistancy,  state 3, region 2!')
        self.assertAlmostEqual(region2.a(30, 700)  / region2.a_h(30,  region2.h(30, 700)), 1.000, places=2, msg='Failed a consistancy,  state 3, region 2!')
        self.assertAlmostEqual(region2.k(30, 700)  / region2.k_h(30,  region2.h(30, 700)), 1.000, places=2, msg='Failed k consistancy,  state 3, region 2!')

    def test_ThermodynamicProperty_Region2_Ps(self):
        self.assertEqual(round(region2.T_s(0.1, 7.5), 6), 0.399517097e3,  'Failed backward temperature, state 1, region 2a!')
        self.assertEqual(round(region2.T_s(0.1, 8.0), 6), 0.514127081e3,  'Failed backward temperature, state 2, region 2a!') 
        self.assertEqual(round(region2.T_s(2.5, 8.0), 5), 0.103984917e4,  'Failed backward temperature, state 3, region 2a!')         
        self.assertEqual(round(region2.T_s(8.0, 6.0), 6), 0.600484040e3,  'Failed backward temperature, state 1, region 2b!')
        self.assertEqual(round(region2.T_s(8.0, 7.5), 5), 0.106495556e4,  'Failed backward temperature, state 2, region 2b!') 
        self.assertEqual(round(region2.T_s(90, 6.0), 5),  0.103801126e4,  'Failed backward temperature, state 3, region 2b!')
        self.assertEqual(round(region2.T_s(20, 5.75), 6), 0.697992849e3,  'Failed backward temperature, state 1, region 2c!')
        self.assertEqual(round(region2.T_s(80, 5.25), 6), 0.854011484e3,  'Failed backward temperature, state 2, region 2c!') 
        self.assertEqual(round(region2.T_s(80, 5.75), 6), 0.949017998e3,  'Failed backward temperature, state 3, region 2c!')

        self.assertAlmostEqual(region2.v(0.0035, 300)  / region2.v_s(0.0035,  region2.s(0.0035, 300)), 1.000, places=2, msg='Failed v consistancy,  state 1, region 2!')
        self.assertAlmostEqual(region2.u(0.0035, 300)  / region2.u_s(0.0035,  region2.s(0.0035, 300)), 1.000, places=2, msg='Failed u consistancy,  state 1, region 2!')
        self.assertAlmostEqual(region2.h(0.0035, 300)  / region2.h_s(0.0035,  region2.s(0.0035, 300)), 1.000, places=2, msg='Failed s consistancy,  state 1, region 2!')
        self.assertAlmostEqual(region2.g(0.0035, 300)  / region2.g_s(0.0035,  region2.s(0.0035, 300)), 1.000, places=1, msg='Failed g consistancy,  state 1, region 2!')
        self.assertAlmostEqual(region2.cp(0.0035, 300) / region2.cp_s(0.0035, region2.s(0.0035, 300)), 1.000, places=2, msg='Failed cp consistancy, state 1, region 2!')
        self.assertAlmostEqual(region2.cv(0.0035, 300) / region2.cv_s(0.0035, region2.s(0.0035, 300)), 1.000, places=2, msg='Failed cv consistancy, state 1, region 2!')
        self.assertAlmostEqual(region2.w(0.0035, 300)  / region2.w_s(0.0035,  region2.s(0.0035, 300)), 1.000, places=2, msg='Failed w consistancy,  state 1, region 2!')
        self.assertAlmostEqual(region2.a(0.0035, 300)  / region2.a_s(0.0035,  region2.s(0.0035, 300)), 1.000, places=2, msg='Failed a consistancy,  state 1, region 2!')
        self.assertAlmostEqual(region2.k(0.0035, 300)  / region2.k_s(0.0035,  region2.s(0.0035, 300)), 1.000, places=2, msg='Failed k consistancy,  state 1, region 2!')

        self.assertAlmostEqual(region2.v(0.0035, 700)  / region2.v_s(0.0035,  region2.s(0.0035, 700)), 1.000, places=2, msg='Failed v consistancy,  state 2, region 2!')
        self.assertAlmostEqual(region2.u(0.0035, 700)  / region2.u_s(0.0035,  region2.s(0.0035, 700)), 1.000, places=2, msg='Failed u consistancy,  state 2, region 2!')
        self.assertAlmostEqual(region2.h(0.0035, 700)  / region2.h_s(0.0035,  region2.s(0.0035, 700)), 1.000, places=2, msg='Failed s consistancy,  state 2, region 2!')
        self.assertAlmostEqual(region2.g(0.0035, 700)  / region2.g_s(0.0035,  region2.s(0.0035, 700)), 1.000, places=2, msg='Failed g consistancy,  state 2, region 2!')
        self.assertAlmostEqual(region2.cp(0.0035, 700) / region2.cp_s(0.0035, region2.s(0.0035, 700)), 1.000, places=2, msg='Failed cp consistancy, state 2, region 2!')
        self.assertAlmostEqual(region2.cv(0.0035, 700) / region2.cv_s(0.0035, region2.s(0.0035, 700)), 1.000, places=2, msg='Failed cv consistancy, state 2, region 2!')
        self.assertAlmostEqual(region2.w(0.0035, 700)  / region2.w_s(0.0035,  region2.s(0.0035, 700)), 1.000, places=2, msg='Failed w consistancy,  state 2, region 2!')
        self.assertAlmostEqual(region2.a(0.0035, 700)  / region2.a_s(0.0035,  region2.s(0.0035, 700)), 1.000, places=2, msg='Failed a consistancy,  state 2, region 2!')
        self.assertAlmostEqual(region2.k(0.0035, 700)  / region2.k_s(0.0035,  region2.s(0.0035, 700)), 1.000, places=2, msg='Failed k consistancy,  state 2, region 2!')
        
        self.assertAlmostEqual(region2.v(30, 700)  / region2.v_s(30,  region2.s(30, 700)), 1.000, places=2, msg='Failed v consistancy,  state 3, region 2!')
        self.assertAlmostEqual(region2.u(30, 700)  / region2.u_s(30,  region2.s(30, 700)), 1.000, places=2, msg='Failed u consistancy,  state 3, region 2!')
        self.assertAlmostEqual(region2.h(30, 700)  / region2.h_s(30,  region2.s(30, 700)), 1.000, places=2, msg='Failed s consistancy,  state 3, region 2!')
        self.assertAlmostEqual(region2.g(30, 700)  / region2.g_s(30,  region2.s(30, 700)), 1.000, places=2, msg='Failed g consistancy,  state 3, region 2!')
        self.assertAlmostEqual(region2.cp(30, 700) / region2.cp_s(30, region2.s(30, 700)), 1.000, places=2, msg='Failed cp consistancy, state 3, region 2!')
        self.assertAlmostEqual(region2.cv(30, 700) / region2.cv_s(30, region2.s(30, 700)), 1.000, places=2, msg='Failed cv consistancy, state 3, region 2!')
        self.assertAlmostEqual(region2.w(30, 700)  / region2.w_s(30,  region2.s(30, 700)), 1.000, places=2, msg='Failed w consistancy,  state 3, region 2!')
        self.assertAlmostEqual(region2.a(30, 700)  / region2.a_s(30,  region2.s(30, 700)), 1.000, places=2, msg='Failed a consistancy,  state 3, region 2!')
        self.assertAlmostEqual(region2.k(30, 700)  / region2.k_s(30,  region2.s(30, 700)), 1.000, places=2, msg='Failed k consistancy,  state 3, region 2!')

if __name__ == '__main__':
    unittest.main()
